###############################################################################
#
# IAR C/C++ Compiler V3.10.1.201 for STM8                 23/Jan/2019  18:06:12
# Copyright 2010-2017 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  
#        D:\Projects\Lab equipment\RFUART\FW\STM8L_IAR\src\gpio_interface.c
#    Command line =  
#        -f C:\Users\Gemicle\AppData\Local\Temp\EW5842.tmp ("D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\src\gpio_interface.c" -e -Ohz --debug
#        --code_model medium --data_model medium -o "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\Release\Obj" --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 8.0\stm8\LIB\dlstm8mmn.h"
#        -D STM8L15X_LD -lcN "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\Release\List" -lb "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\Release\List" -I "D:\Projects\Lab
#        equipment\RFUART\FW\IAR\" -I "D:\Projects\Lab
#        equipment\RFUART\FW\IAR\src\" -I "D:\Projects\Lab
#        equipment\RFUART\FW\IAR\inc\" -I "D:\Projects\Lab
#        equipment\RFUART\FW\IAR\STM8L15x_StdPeriph_Driver\src\" -I
#        "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\STM8L15x_StdPeriph_Driver\" -I
#        "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\STM8L15x_StdPeriph_Driver\inc\" -I
#        "D:\Projects\Lab equipment\RFUART\FW\STM8L_IAR\inc\"
#        --require_prototypes --vregs 16)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\Release\List\gpio_interface.lst
#    Object file  =  
#        D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\Release\Obj\gpio_interface.o
#
###############################################################################

D:\Projects\Lab equipment\RFUART\FW\STM8L_IAR\src\gpio_interface.c
      1          #include "gpio_interface.h"
      2          
      3          void initIO(void);
      4          
      5          void Green_On (void);
      6          void Green_Off (void);
      7          void Red_On (void);
      8          void Red_Off (void);
      9          
     10          void RF69_select(void);
     11          void RF69_deselect(void);
     12          void checkDIO0(void);
     13          uint8_t checkDIO1(void);
     14          void RF69_HWreset (void);
     15          
     16          void cbDIO0irq (void);
     17          void cbDIO1irq(void);
     18          
     19          void initIO(void)
     20          {
     21            //port A 
     22            //PA3 - TXD, PA4 - RXD
     23            GPIO_Init(UARTPORT, TXD_PIN, GPIO_Mode_Out_PP_High_Fast);
     24            GPIO_Init(UARTPORT, RXD_PIN, GPIO_Mode_In_PU_No_IT);
     25            //port B
     26            //PB0, PB1 - LED's, PB4 - NSS, PB5 - SCK, PB6 - MOSI, PB7 - MISO 
     27            GPIO_Init(LEDPORT, RED, GPIO_Mode_Out_OD_HiZ_Slow);
     28            GPIO_Init(LEDPORT, GREEN, GPIO_Mode_Out_OD_HiZ_Slow);
     29            GPIO_Init(SPIPORT, NSS_PIN, GPIO_Mode_Out_PP_High_Fast);
     30            GPIO_Init(SPIPORT, SCK_PIN, GPIO_Mode_Out_PP_Low_Fast);
     31            GPIO_Init(SPIPORT, MOSI_PIN, GPIO_Mode_Out_PP_Low_Fast);
     32            GPIO_Init(SPIPORT, MISO_PIN, GPIO_Mode_In_FL_No_IT);
     33            GPIO_WriteBit(SPIPORT, NSS_PIN, SET); 
     34            //port C
     35            //PC0 - IRQ, PC1 - RF reset, PC4 - PRG pin, PC5, PC6 - keys
     36            GPIO_Init(RFPORT, DIO0_PIN, GPIO_Mode_In_FL_No_IT);
     37            GPIO_Init(RFPORT, DIO1_PIN, GPIO_Mode_In_FL_No_IT);
     38            GPIO_Init(RFPORT, RESET_PIN, GPIO_Mode_In_FL_No_IT); 
     39          
     40            //GPIO_Init(KEYPORT, PRG_PIN, GPIO_Mode_In_PU_No_IT);
     41          
     42            GPIO_Init(KEYPORT, K0, GPIO_Mode_In_PU_No_IT);
     43            GPIO_Init(KEYPORT, K1, GPIO_Mode_In_PU_No_IT);
     44            //port D - not in use, no init
     45            
     46              //UART GPIO settings
     47            GPIO_Init(UARTPORT, TXD_PIN, GPIO_Mode_Out_PP_High_Fast);
     48            GPIO_Init(UARTPORT, RXD_PIN, GPIO_Mode_In_PU_No_IT);
     49            
     50            //external interrupt (DIO0/IRQ, DIO1)
     51            EXTI_DeInit();
     52            EXTI_SetPinSensitivity(DIO0_EXTI_PIN, EXTI_Trigger_Rising); 
     53            EXTI_SetPinSensitivity(DIO1_EXTI_PIN, EXTI_Trigger_Rising);
     54             
     55          }
     56          
     57          
     58          void cbDIO0irq (void)
     59          {
     60            
     61            if (EXTI_GetITStatus(DIO0_IT_PIN) == SET)
     62            {
     63              EXTI_ClearITPendingBit(DIO0_IT_PIN);
     64              
     65              RF69_RXflag = 1;
     66            }
     67              
     68           
     69          }
     70          
     71          void cbDIO1irq(void)
     72          {
     73              if (EXTI_GetITStatus(DIO1_IT_PIN) == SET)
     74            {
     75              EXTI_ClearITPendingBit(DIO1_IT_PIN);
     76              //GPIO_Init(RFPORT, DIO1_PIN, GPIO_Mode_In_FL_No_IT);
     77              RF69_RXtimeout = 1;
     78              
     79            }
     80          }
     81          
     82          void Green_On (void)
     83          {
     84            GPIO_WriteBit(LEDPORT, GREEN, RESET);
     85          }
     86            
     87          void Green_Off (void)
     88          {
     89            GPIO_WriteBit(LEDPORT, GREEN, SET);
     90          }
     91            
     92          void Red_On (void)
     93          {
     94            GPIO_WriteBit(LEDPORT, RED, RESET);
     95          }
     96            
     97          void Red_Off (void)
     98          {
     99            GPIO_WriteBit(LEDPORT, RED, SET);
    100          }
    101            
    102          void RF69_select(void)
    103          {
    104            GPIO_WriteBit(SPIPORT, NSS_PIN, RESET);  
    105          }
    106          
    107          void RF69_deselect(void)
    108          {
    109            GPIO_WriteBit(SPIPORT, NSS_PIN, SET); 
    110          }
    111          
    112          void checkDIO0(void)
    113          {
    114            while(GPIO_ReadInputDataBit(RFPORT, DIO0_PIN) == RESET);
    115          }
    116          
    117          uint8_t checkDIO1(void)
    118          {
    119            if (GPIO_ReadInputDataBit(RFPORT, DIO1_PIN) == RESET) return 0;
    120            else return 1;
    121          }
    122          
    123          //hardware reset
    124          void RF69_HWreset (void)
    125          {
    126              //set reset port as output
    127              GPIO_Init(RFPORT, RESET_PIN, GPIO_Mode_Out_PP_Low_Fast);
    128              GPIO_WriteBit(RFPORT, RESET_PIN, SET);
    129          	//delay 5...10 ms
    130              delay_ms(10);
    131              GPIO_WriteBit(RFPORT, RESET_PIN, RESET);
    132              //set reset port as HI-Z input
    133              GPIO_Init(RFPORT, RESET_PIN, GPIO_Mode_In_FL_No_IT);
    134              delay_ms(10);
    135              
    136          	
    137          }

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       9  ??Subroutine6_0
      26  ?Subroutine0
       2  ?Subroutine1
      12  ?Subroutine2
       7  ?Subroutine3
       9  ?Subroutine4
       7  ?Subroutine5
      13  Green_Off
      11  Green_On
      40  RF69_HWreset
      13  RF69_deselect
      11  RF69_select
      13  Red_Off
      11  Red_On
      20  cbDIO0irq
      23  cbDIO1irq
      14  checkDIO0
      18  checkDIO1
     134  initIO

 
 393 bytes in section .far_func.text
 
 393 bytes of CODE memory

Errors: none
Warnings: none
