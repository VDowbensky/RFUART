###############################################################################
#
# IAR C/C++ Compiler V3.11.1.207 for STM8                 26/Jul/2019  14:50:13
# Copyright 2010-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  
#        D:\Projects\Lab
#        equipment\RFUART\FW\pingpong\STM8L_pingpong\src\RFM69.c
#    Command line =  
#        -f C:\Users\Gemicle\AppData\Local\Temp\EWB4F5.tmp ("D:\Projects\Lab
#        equipment\RFUART\FW\pingpong\STM8L_pingpong\src\RFM69.c" -e -Ohz
#        --debug --code_model medium --data_model medium -o "D:\Projects\Lab
#        equipment\RFUART\FW\pingpong\STM8L_pingpong\Debug\Obj" --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\stm8\LIB\dlstm8mmn.h" -D STM8L15X_LD -lcN "D:\Projects\Lab
#        equipment\RFUART\FW\pingpong\STM8L_pingpong\Debug\List" -lb
#        "D:\Projects\Lab
#        equipment\RFUART\FW\pingpong\STM8L_pingpong\Debug\List" -I
#        "D:\Projects\Lab equipment\RFUART\FW\STM8L_IAR\" -I "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\src\" -I "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\inc\" -I "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\STM8L15x_StdPeriph_Driver\src\" -I
#        "D:\Projects\Lab
#        equipment\RFUART\FW\STM8L_IAR\STM8L15x_StdPeriph_Driver\inc\"
#        --require_prototypes --vregs 16)
#    Locale       =  Russian_RUS.1251
#    List file    =  
#        D:\Projects\Lab
#        equipment\RFUART\FW\pingpong\STM8L_pingpong\Debug\List\RFM69.lst
#    Object file  =  
#        D:\Projects\Lab
#        equipment\RFUART\FW\pingpong\STM8L_pingpong\Debug\Obj\RFM69.o
#
###############################################################################

D:\Projects\Lab equipment\RFUART\FW\pingpong\STM8L_pingpong\src\RFM69.c
      1          #include "RFM69.h"
      2          //variables
      3          uint8_t RF69_TXbuffer[RF69BUFFERSIZE];
      4          uint8_t RF69_RXbuffer[RF69BUFFERSIZE];
      5          //uint8_t RF69_SyncValue[8] = {WORK_SYNC1, WORK_SYNC2, WORK_SYNC3, WORK_SYNC4, WORK_SYNC5, WORK_SYNC6, WORK_SYNC7, WORK_SYNC8};
      6          uint8_t RF69_AesKey[16];
      7          //uint8_t Channel = WORK_CHANNEL;
      8          //uint32_t Bitrate = WORK_BITRATE;
      9          //uint32_t Deviation = WORK_DEVIATION;
     10          //uint8_t Txpower = WORK_TXPOWER;
     11          //uint8_t NodeAddr = WORK_NODEADDR;
     12          uint8_t NodeAddr; //maybe increment on TX restart
     13          
     14          
     15          
     16          //low level routines
     17          //write register
     18          //reg - reg number, v - value
     19          void RF69_writereg (uint8_t reg, uint8_t v);
     20          //read register
     21          //reg - reg number, returns reg value
     22          uint8_t RF69_readreg (uint8_t reg);
     23          
     24          //initial procedure
     25          void RF69_init(void);
     26          uint8_t RF69_getversion(void);
     27          
     28          
     29          //set global parameters: bitrate, modulation
     30          void RF69_setmodulation (uint8_t m);
     31          void RF69_setdeviation(uint32_t d);
     32          void RF69_setbitrate(uint32_t br);
     33          //RC osc. calibration - check and perform if needed
     34          void RF69_startRCcal(void);
     35          uint8_t RF69_checkRCcal(void);
     36          //listen mode settings
     37          void RF69_setListenMode(uint8_t m1, uint8_t m2, uint8_t m3);
     38          //batt. management settings
     39          
     40          //TX parameters settings: PA select, PA ramp, PAbooster, current trimming
     41          void RF69_setpower(uint8_t pwr); 
     42          void RF69_setPAramp(uint8_t p);
     43          
     44          //RX parameters: BW, DCC freq., AFC, OOK, RSSI, LNA, DAGC etc.
     45          void setAFClowbeta(uint8_t a);
     46          void RF69_setLNAgain (uint8_t g);
     47          uint8_t RF69_getLNAgain(void);
     48          void RF69_setRXBW(uint8_t d, uint8_t w);
     49          void RF69_setAFCBW(uint8_t d, uint8_t w);
     50          void RF69_setAFC(uint8_t a);
     51          int16_t RF69_getAFC(void);
     52          int16_t RF69_getFEI(void); //TODO
     53          void RF69_startRSSI(void);
     54          uint8_t RF69_checkRSSI(void);
     55          //IRQ and IO mapping
     56          void RF69_setDIOmapping(uint8_t m1, uint8_t m2); 
     57          uint16_t RF69_getIRQflags(void);
     58          void RF69_setRSSItr (uint8_t t); //TODO
     59          
     60          void RF69_setRXtimeouts(uint8_t t1, uint8_t t2);
     61          
     62          void RF69_restartRX(void);
     63          
     64          int8_t RF69_tempmeas(void);
     65          
     66          
     67          //packet handler parameters
     68          //***********************************************************************************************
     69          
     70          
     71          //operative settings
     72          
     73          //operating mode (sleep, standby, synth, rx, tx)
     74          void RF69_setopmode (uint8_t mode);
     75          //channel
     76          void RF69_setchannel(uint8_t ch); //uint8_t ch
     77          //tx power
     78          void RF69_setpower(uint8_t pwr);
     79          //get RSSI
     80          int8_t RF69_getRSSI(void); //propably maybe dependent on channel 
     81          //get status (IRQ flags)
     82          uint16_t RF69_getIRQflags(void);
     83          
     84          void RF69_setRSSItr (uint8_t t); //TODO;
     85          int8_t RF69_getRSSItr (void);
     86          void RF69_setRXstartTO (uint8_t t); //TODO
     87          void RF69_setRSSITO (uint8_t t); //TODO
     88          void RF69_setPreambleSize (uint16_t s);
     89          void RF69_setSyncConfig(uint8_t c);
     90          void RF69_setSyncValue (void); // up to 8 bytes
     91          void RF69_setPacketConfig1(uint8_t c);
     92          void RF69_setPacketConfig2(uint8_t c);
     93          void RF69_setPayLen (uint8_t l);
     94          void RF69_setNodeAddr(uint8_t a);
     95          void RF69_setBrAddr(uint8_t a);
     96          void RF69_setAutoModes(uint8_t a);
     97          //AES key
     98          void RF69_setAESkey(void);
     99          void RF69_setFIFOtr (uint8_t c, uint8_t tr);
    100          //temperature
    101          //test registers******************************************************************************
    102          //test LNA
    103          //PA_20 dBm
    104          //fading margin
    105          //low beta AFC offset
    106          void RF69_setAFClowbeta(uint8_t a);
    107          //fill FIFO
    108          void RF69_writeFIFO (uint8_t n);
    109          //read FIFO
    110          void RF69_readFIFO (uint8_t n);
    111          //clear FIFO
    112          void RF69_clearFIFO (void);
    113          
    114          void RF69_calctemp(void);
    115          //**********************************************************************************************
    116          //main communication procedures
    117          //get packet
    118          //send packet
    119          void RF69_sendpacket(uint8_t packet_size, uint8_t address);
    120          //implementation****************************************************************************************
    121          //******************************************************************************************************
    122          void RF69_init(void)
    123          {
    124          	RF69_HWreset();
    125                  delay_ms(100);
    126          	RF69_setopmode (RF_OPMODE_STANDBY);
    127                  //delay_ms(200);
    128                  RF69_setchannel(Channel);
    129          	RF69_setbitrate (BitRate);
    130          	RF69_setmodulation (ModSetting);
    131          	RF69_setdeviation(Deviation);
    132                  
    133                  //RF69_setDIOmapping(DIOM1_RX, DIOM2_DEFAULT);
    134                  
    135          	//TX amp parameters
    136          	RF69_setpower(TxPower);
    137          	RF69_setPAramp(WORK_PA_RAMP); //maybe changed
    138          	//RX parameters
    139          	RF69_setLNAgain(LnaSetting & ~LNABOOST); //maybe changed or parametrized
    140                  //enable RX booster - maybe not mandatory in urban areas
    141                  if(LnaSetting & LNABOOST) RF69_writereg(REG_TESTLNA, LNA_HIGH);
    142                  else RF69_writereg(REG_TESTLNA, LNA_NORM);         
    143                  //RX BW
    144                  RF69_setRXBW(RbwDcc, Rbw);
    145                  //RX AFC
    146                  RF69_setAFCBW(AfcDcc, Abw);
    147                  RF69_setAFC(AfcSetting); //AFCFEI
    148                  
    149                  RF69_writereg(REG_TESTDAGC, Dagc);
    150                  
    151                  //RF69_setAFClowbeta(AFC_LOWBETA_IMPROVED);//AFC low beta on
    152                  RF69_setAFClowbeta(AFC_LOWBETA_STANDARD);
    153                  //RF69_writereg(REG_TESTAFC, LbOffset); //2.9 kHz
    154          
    155                  
    156                  //RSSI
    157                  RF69_setRSSItr(RssiTr);
    158                  //timeouts
    159                  RF69_setRXtimeouts(RxTo, RssiTo);
    160          	//packet handler settings
    161                  RF69_setPreambleSize(WORK_PREAMBLESIZE);
    162                  RF69_setSyncConfig(WORK_SYNC_CONFIG);
    163                  RF69_setSyncValue();
    164                  RF69_setPayLen(66); //!!!
    165                  RF69_setPacketConfig1(PkConfig1);
    166                  RF69_setPacketConfig2(PkConfig2);
    167                  RF69_setNodeAddr(NdAddr);
    168                  RF69_setBrAddr(WORK_BRADDR);
    169          
    170                  RF69_writereg(REG_FIFOTHRESH, WORK_FIFOTRESH);
    171                  //RF69_setopmode(RF_OPMODE_RECEIVER);
    172                  RF69_restartRX();
    173          
    174                  
    175          }
    176          
    177          //get version
    178          uint8_t RF69_getversion(void)
    179          {
    180          	return RF69_readreg(REG_VERSION);
    181          }
    182          
    183          //RC OSC calibration
    184          void RF69_startRCcal(void)
    185          {
    186          	RF69_writereg(REG_OSC1, 0x80);
    187          }
    188          
    189          uint8_t RF69_checkRCcal(void)
    190          {
    191          	uint8_t t;
    192          	t = RF69_readreg(REG_OSC1);
    193          	t = (t & 0x40) >> 6;
    194          	return t; //0 - calibration in progress, 1 - calibration done
    195          }
    196          //operative settings
    197          //operating mode (sleep, standby, synth, rx, tx)
    198          
    199          void RF69_setopmode (uint8_t m) //listen always off, sequencer always off
    200          {
    201          	RF69_writereg(REG_OPMODE, m);
    202                  while(!(RF69_readreg(REG_IRQFLAGS1) & MODE_READY)); //wait for mode changing
    203                  
    204          }
    205          
    206          void RF69_setmodulation (uint8_t m)
    207          {
    208          	RF69_writereg(REG_DATAMODUL, m);
    209          }
    210          
    211          void RF69_setbitrate(uint32_t br)
    212          {
    213          	uint8_t t1, t2;
    214          	t1 = HI(FOSC/br);
    215          	t2 = LO(FOSC/br);
    216          	RF69_writereg(REG_BITRATEMSB, t1);
    217          	RF69_writereg(REG_BITRATELSB, t2);
    218          }
    219          
    220          
    221          // TX channel
    222          void RF69_setchannel(uint8_t ch) //uint8_t ch
    223          {
    224          	//add channel offset/ Attention - offset frequency should be no more than 16777215 Hz!
    225          	//e.g. for 256 channels max. step is 65535 kHz, for 100 channels - 167 kHz etc.
    226          	//TODO: add this checking
    227          	int32_t t;
    228                  t = (F_Base/F_PREDIV)*F_MUL + ((F_Base%F_PREDIV)*F_MUL)/F_PREDIV + (F_Step*ch - F_Offset)*F_MUL/F_PREDIV;
    229                //temperature compensation
    230                  t = t - ((Temperature - Tcal)*Tslope)*F_MUL/F_PREDIV;
    231                  RF69_writereg(REG_FRFMSB, HIGL(t));
    232          	RF69_writereg(REG_FRFMID, LOWH(t));
    233          	RF69_writereg(REG_FRFLSB, LOWL(t));
    234          }
    235          
    236          
    237          //transmitter*****************************************
    238          
    239          void RF69_setdeviation(uint32_t d)
    240          {
    241          	
    242          	uint32_t t;
    243          	uint8_t t1, t2;
    244          	t = (d*F_MUL)/F_PREDIV;
    245          	t1 = HI(t);
    246          	t2 = LO(t);
    247          	RF69_writereg(REG_FDEVMSB, t1);
    248          	RF69_writereg(REG_FDEVLSB, t2);
    249          	
    250          }
    251          
    252          //
    253          
    254          //tx power
    255          void RF69_setpower(uint8_t pwr) 
    256          {
    257          	RF69_writereg(REG_PALEVEL, (WORK_PA_SETTING + pwr));
    258          }
    259          
    260          void RF69_setPAramp(uint8_t p)
    261          {
    262          	RF69_writereg(REG_PARAMP, p);
    263          }
    264          
    265          
    266          
    267          
    268          
    269          //receiver**********************************
    270          //AFC
    271          void RF69_setAFClowbeta(uint8_t a)
    272          {
    273          	RF69_writereg(REG_AFCCTRL, a);
    274          }
    275          
    276          //listen mode (usually not in use)
    277          void RF69_setListenMode(uint8_t m1, uint8_t m2, uint8_t m3)
    278          {
    279          	RF69_writereg(REG_LISTEN1, m1);
    280          	RF69_writereg(REG_LISTEN2, m2);
    281          	RF69_writereg(REG_LISTEN3, m3);
    282          	
    283          }
    284          
    285          //LNA settings
    286          
    287          void RF69_setLNAgain (uint8_t g)
    288          {
    289          	RF69_writereg(REG_LNA, g);
    290          }
    291          
    292          //get LNA gain
    293          uint8_t RF69_getLNAgain(void)
    294          {
    295          	return (RF69_readreg(REG_LNA) & 0x38) >> 3;
    296          }
    297          
    298          
    299          //RX bandwidth
    300          void RF69_setRXBW(uint8_t d, uint8_t w) 
    301          {
    302              RF69_writereg(REG_RXBW, (d | w));
    303          }
    304          
    305          void RF69_setAFCBW(uint8_t d, uint8_t w)
    306          {
    307              RF69_writereg(REG_AFCBW, (d | w));
    308          }
    309          
    310          //reg OOK Peak
    311          
    312          //reg OOK Avg
    313          
    314          //reg OOK Fix
    315          
    316          //AFC settings
    317          void RF69_setAFC(uint8_t a)
    318          {
    319          	RF69_writereg(REG_AFCFEI, a);
    320          }
    321          
    322          
    323          int16_t RF69_getAFC(void)//TODO
    324          {
    325          	return ((int16_t)RF69_readreg(REG_AFCMSB) << 8) + (int16_t)RF69_readreg(REG_AFCLSB);
    326          }
    327          
    328          int16_t RF69_getFEI(void) //TODO
    329          {
    330          	return ((int16_t)RF69_readreg(REG_FEIMSB) << 8) + (int16_t)RF69_readreg(REG_FEILSB);
    331          }
    332          
    333          //start RSSI
    334          
    335          void RF69_startRSSI(void)
    336          {
    337            RF69_writereg(REG_RSSICONFIG, 0x01);
    338          }
    339          uint8_t RF69_checkRSSI(void)
    340          {
    341            return (RF69_readreg(REG_RSSICONFIG) & 0x02);
    342          }
    343          
    344          //get RSSI
    345          int8_t RF69_getRSSI(void) //propably maybe dependent on channel 
    346          {
    347            //RF69_startRSSI();
    348            //while(!(RF69_checkRSSI()));
    349            //return -(RF69_readreg(REG_RSSIVALUE)/2); //divide by 2 and negative
    350            return RF69_readreg(REG_RSSIVALUE)/2;
    351          }
    352          
    353          //DIO mapping
    354          //temporary
    355          void RF69_setDIOmapping(uint8_t m1, uint8_t m2)//TODO
    356          {
    357              RF69_writereg(REG_DIOMAPPING1, m1); 
    358              RF69_writereg(REG_DIOMAPPING2, m2); 
    359          }
    360          //get irq flags - TODO!!!
    361          uint16_t RF69_getIRQflags(void)
    362          {
    363          	return ((uint16_t)RF69_readreg(REG_IRQFLAGS1) << 8) + RF69_readreg(REG_IRQFLAGS2); //maybe vice versa
    364          }
    365          //set RSSI threshold
    366          void RF69_setRSSItr (uint8_t t) //TODO
    367          {
    368            RF69_writereg(REG_RSSITHRESH, t);
    369          }
    370          //get RSSI treshold
    371          int8_t RF69_getRSSItr (void)
    372          {
    373          	return -(RF69_readreg(REG_RSSITHRESH)/2); //divide by 2 and negative
    374          }
    375          
    376          //set RX timeouts
    377          void RF69_setRXtimeouts(uint8_t t1, uint8_t t2)
    378          {
    379              RF69_writereg(REG_RXTIMEOUT1, t1);
    380              RF69_writereg(REG_RXTIMEOUT2, t2);
    381              
    382          }
    383          
    384          //packet handler*********************************************************************************
    385          
    386          //set preamble size
    387          void RF69_setPreambleSize (uint16_t s)
    388          {
    389          	RF69_writereg(PREAMBLEMSB, s >> 8);
    390          	RF69_writereg(PREAMBLELSB, s & 0x00FF);
    391          }
    392          //set sync config
    393          void RF69_setSyncConfig(uint8_t c)
    394          {
    395          	RF69_writereg(REG_SYNCCONFIG, c);
    396          }
    397          //set sync value - 8 bytes
    398          void RF69_setSyncValue (void) //8 bytes. TODO
    399          {
    400              uint8_t i;
    401              for(i=0; i < SYNC_SIZE+1; i++)
    402              {
    403                RF69_writereg(REG_SYNCVALUE1+i, SyncWord[i]);
    404              }
    405          }
    406          //packet format
    407          void RF69_setPacketConfig1(uint8_t c)
    408          {
    409          	RF69_writereg(REG_PACKETCONFIG1, c);
    410          }	
    411          //packet config 2
    412          void RF69_setPacketConfig2(uint8_t c)
    413          {
    414          	RF69_writereg(REG_PACKETCONFIG2, c);
    415          }	
    416          //payload length
    417          void RF69_setPayLen (uint8_t l)
    418          {
    419          	RF69_writereg(REG_PAYLOADLENGTH, l);
    420          }
    421          
    422          //node address
    423          void RF69_setNodeAddr(uint8_t a)
    424          {
    425          	RF69_writereg(REG_NODEADRS, a);
    426          }
    427          //broadcast address
    428          void RF69_setBrAddr(uint8_t a)
    429          {
    430                  RF69_writereg(REG_BROADCASTADRS, a);
    431          }
    432          
    433          
    434          //auto modes
    435          void RF69_setAutoModes(uint8_t a)
    436          {
    437          	RF69_writereg(REG_AUTOMODES , a);
    438          }
    439          //FIFO threshold
    440          void RF69_setFIFOtr (uint8_t c, uint8_t tr) //condition; FIFO treshold
    441          {
    442          	RF69_writereg(REG_FIFOTHRESH, ((c <<7) | (tr & 0x7F)));
    443          }
    444          
    445          //AES key
    446          
    447          void RF69_setAESkey(void)
    448          {
    449          	uint8_t i;
    450          	for(i = 0; i < 16; i++)
    451          	RF69_writereg(REG_AESKEY1 + i, RF69_AesKey[i]);
    452          		
    453          }
    454          
    455          //temperature
    456          
    457          int8_t RF69_tempmeas(void)
    458          {
    459            RF69_writereg(REG_TEMP1, T_MEASSTART);
    460            while (RF69_readreg(REG_TEMP1) & T_MEASRUN); //wait for complete
    461            return RF69_readreg(REG_TEMP2);
    462          }
    463          
    464          void RF69_calctemp(void)
    465          {
    466            //read temperature
    467            Temperature = TcalValue + Tcal - RF69_tempmeas();
    468            RF69_setchannel(Channel);
    469          }
    470          
    471          //test registers******************************************************************************
    472          
    473          //test LNA
    474          
    475          //PA_20 dBm
    476          
    477          //fading margin
    478          
    479          //low beta AFC offset
    480          
    481          //fill FIFO
    482          void RF69_writeFIFO (uint8_t n)
    483          {
    484            
    485          }
    486          //read FIFO
    487          void RF69_readFIFO (uint8_t n)
    488          {
    489            uint8_t i;
    490            for (i = 0; i < n; i++) RF69_RXbuffer[i] = RF69_readreg(REG_FIFO);
    491          }
    492          //clear FIFO
    493          void RF69_clearFIFO (void)
    494          {
    495            //uint8_t i;
    496            //for(i = 0 ; i < RFM69_BUFFER_SIZE; ++i)   { RF69_readreg(REG_FIFO); }       // read every register one by one
    497            RF69_writereg(REG_IRQFLAGS2, FIFO_OVR);                      // clear flag if overrun
    498          }
    499          //**********************************************************************************************
    500          //main communication procedures
    501          
    502          //get packet
    503          
    504          //send packet
    505          
    506          void RF69_sendpacket(uint8_t packet_size, uint8_t address)
    507          {
    508          
    509            uint8_t i;
    510          
    511            if(packet_size > RFM69_BUFFER_SIZE-1)  packet_size = RFM69_BUFFER_SIZE-1;                         // check size of the package
    512            RF69_clearFIFO();
    513            RF69_calctemp(); //frequency correction
    514            RF69_setopmode (RF_OPMODE_TRANSMITTER);                        // makes transmitter on
    515            RF69_TXbuffer[0] = packet_size+1;
    516            RF69_TXbuffer[1] = address;
    517          
    518            //RF69_writereg(REG_FIFO, packet_size + 1);                                    // transmit the packet size into FIFO
    519            //RF69_writereg(REG_FIFO, address);                                            // transmit address into FIFO
    520            //for(i = 0 ; i < packet_size ; ++i)
    521            for(i = 0 ; i < packet_size+2 ; i++)
    522            {
    523              RF69_writereg(REG_FIFO, RF69_TXbuffer[i]); // transmit packet payload into FIFO
    524            }
    525             checkDIO0();
    526            //exit on EXTI
    527            }
    528          
    529          void RF69_restartRX(void)
    530          {
    531            RF69_RXtimeout = 0;
    532            //RxState = FALSE;
    533            RF69_setopmode (RF_OPMODE_STANDBY);
    534            RF69_clearFIFO();
    535            //RF69_setAFC(AFC_AUTO_ON | AFC_AUTOCLEAR | AFC_CLEAR); //AFCFEI
    536            //RF69_setDIOmapping(DIOM1_RXWAIT, DIOM2_DEFAULT);
    537            RF69_setDIOmapping(DIOM1_RX, DIOM2_DEFAULT);
    538            RF69_setPacketConfig2(WORK_PACKETCONFIG2);
    539            RF69_calctemp(); //freq. correction
    540            RF69_setopmode (RF_OPMODE_RECEIVER);
    541            //start new RSSI measuring
    542            RF69_startRSSI();
    543            
    544          }
    545            
    546          
    547          
    548          
    549          //**********************************************************************************************
    550          
    551          //low level routines
    552          //based on external NCS handling (RF69_select, RF69_deselect) and SPI transfer (spi_transfer) functions
    553          
    554          
    555          //write register
    556          //reg - reg number, v - value
    557          void RF69_writereg (uint8_t reg, uint8_t v)
    558          {
    559          	
    560              RF69_select();
    561              spi_transfer(reg | 0x80);
    562              spi_transfer(v);
    563              RF69_deselect();
    564          	
    565          }
    566          //read register
    567          //reg - reg number, returns reg value
    568          uint8_t RF69_readreg (uint8_t reg)
    569          {
    570              
    571              uint8_t r;
    572              RF69_select();
    573              spi_transfer(reg & ~0x80);
    574              r = spi_transfer(0);
    575              RF69_deselect();
    576              return r;
    577          	
    578          }
    579          
    580          
    581          
    582          
    583          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      15  ?Subroutine0
      19  ?Subroutine1
      10  ?Subroutine2
       8  ?Subroutine3
       8  ?Subroutine4
       1  NodeAddr
      16  RF69_AesKey
      66  RF69_RXbuffer
      66  RF69_TXbuffer
      39  RF69_calctemp
      13  RF69_checkRCcal
       9  RF69_checkRSSI
      10  RF69_clearFIFO
      21  RF69_getAFC
      21  RF69_getFEI
      21  RF69_getIRQflags
      12  RF69_getLNAgain
       8  RF69_getRSSI
       9  RF69_getRSSItr
       6  RF69_getversion
     226  RF69_init
      38  RF69_readFIFO
      34  RF69_readreg
      50  RF69_restartRX
      87  RF69_sendpacket
      34  RF69_setAESkey
       8  RF69_setAFC
      14  RF69_setAFCBW
       8  RF69_setAFClowbeta
       8  RF69_setAutoModes
       8  RF69_setBrAddr
      24  RF69_setDIOmapping
      25  RF69_setFIFOtr
       8  RF69_setLNAgain
      37  RF69_setListenMode
       8  RF69_setNodeAddr
       8  RF69_setPAramp
       8  RF69_setPacketConfig1
       8  RF69_setPacketConfig2
       8  RF69_setPayLen
      27  RF69_setPreambleSize
       8  RF69_setRSSItr
      14  RF69_setRXBW
      24  RF69_setRXtimeouts
       8  RF69_setSyncConfig
      34  RF69_setSyncValue
      39  RF69_setbitrate
     249  RF69_setchannel
      31  RF69_setdeviation
       8  RF69_setmodulation
      19  RF69_setopmode
      10  RF69_setpower
      10  RF69_startRCcal
      10  RF69_startRSSI
      26  RF69_tempmeas
       1  RF69_writeFIFO
      35  RF69_writereg

 
 1 431 bytes in section .far_func.text
   149 bytes in section .near.bss
 
 1 431 bytes of CODE memory
   149 bytes of DATA memory

Errors: none
Warnings: 6
